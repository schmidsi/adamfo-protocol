/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AdamfoProtocolInterface extends utils.Interface {
  functions: {
    "createPool(address[])": FunctionFragment;
    "pools()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "createPool" | "pools"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPool",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "pools", values?: undefined): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;

  events: {
    "PoolCreated(address,address[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
}

export interface PoolCreatedEventObject {
  childAddress: string;
  members: string[];
  identifier: BigNumber;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string[], BigNumber],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface AdamfoProtocol extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdamfoProtocolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPool(
      members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pools(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createPool(
    members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pools(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createPool(
      members: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pools(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PoolCreated(address,address[],uint256)"(
      childAddress?: null,
      members?: null,
      identifier?: null
    ): PoolCreatedEventFilter;
    PoolCreated(
      childAddress?: null,
      members?: null,
      identifier?: null
    ): PoolCreatedEventFilter;
  };

  estimateGas: {
    createPool(
      members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pools(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createPool(
      members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pools(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
